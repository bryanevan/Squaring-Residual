{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import warnings\n",
    "\n",
    "from IPython.display import display\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from sklearn import linear_model\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "# Display preferences.\n",
    "%matplotlib inline\n",
    "pd.options.display.float_format = '{:.3f}'.format\n",
    "\n",
    "# Suppress annoying harmless error.\n",
    "warnings.filterwarnings(\n",
    "    action=\"ignore\",\n",
    "    module=\"scipy\",\n",
    "    message=\"^internal gelsd\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>TV</th>\n",
       "      <th>Radio</th>\n",
       "      <th>Newspaper</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>230.100</td>\n",
       "      <td>37.800</td>\n",
       "      <td>69.200</td>\n",
       "      <td>22.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>44.500</td>\n",
       "      <td>39.300</td>\n",
       "      <td>45.100</td>\n",
       "      <td>10.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>17.200</td>\n",
       "      <td>45.900</td>\n",
       "      <td>69.300</td>\n",
       "      <td>9.300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>151.500</td>\n",
       "      <td>41.300</td>\n",
       "      <td>58.500</td>\n",
       "      <td>18.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>180.800</td>\n",
       "      <td>10.800</td>\n",
       "      <td>58.400</td>\n",
       "      <td>12.900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      TV  Radio  Newspaper  Sales\n",
       "0           1 230.100 37.800     69.200 22.100\n",
       "1           2  44.500 39.300     45.100 10.400\n",
       "2           3  17.200 45.900     69.300  9.300\n",
       "3           4 151.500 41.300     58.500 18.500\n",
       "4           5 180.800 10.800     58.400 12.900"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coefficients: \n",
      " [[ 0.04576465  0.18853002 -0.00103749]]\n",
      "\n",
      "Intercept: \n",
      " [2.93888937]\n",
      "\n",
      "R-squared:\n",
      "0.8972106381789521\n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv('https://tf-curricula-prod.s3.amazonaws.com/data-science/Advertising.csv')\n",
    "display(data.head())\n",
    "\n",
    "regr = linear_model.LinearRegression()\n",
    "Y = data['Sales'].values.reshape(-1, 1)\n",
    "X = data[['TV','Radio','Newspaper']]\n",
    "regr.fit(X, Y)\n",
    "\n",
    "print('\\nCoefficients: \\n', regr.coef_)\n",
    "print('\\nIntercept: \\n', regr.intercept_)\n",
    "print('\\nR-squared:')\n",
    "print(regr.score(X, Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Extract predicted values.\n",
    "predicted = regr.predict(X).ravel()\n",
    "actual = data['Sales']\n",
    "\n",
    "# Calculate the error, also called the residual.\n",
    "residual = actual - predicted\n",
    "\n",
    "# This looks a bit concerning.\n",
    "plt.hist(residual)\n",
    "plt.title('Residual counts')\n",
    "plt.xlabel('Residual')\n",
    "plt.ylabel('Count')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(predicted, residual)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Residual')\n",
    "plt.axhline(y=0)\n",
    "plt.title('Residual vs. Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "sqrt_feature = residual.apply(np.sqrt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(predicted, sqrt_feature)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Squared Residual')\n",
    "plt.axhline(y=0)\n",
    "plt.title('Squared Residual vs. Predicted')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
